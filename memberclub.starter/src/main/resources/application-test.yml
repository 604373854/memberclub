spring:
  #### 数据库 配置
  datasource:
    dynamic:
      primary: tradeDataSource
      strict: true
      datasource:
        druid:
          initialSize: 3
          minIdle: 3
          maxActive: 20
  shardingsphere:
    mode:
      type: Memory ## Sharding-jdbc 运行模式
    datasource:
      names: trade0,sku0  ## 数据源别名
      common:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
      trade0:
        type: com.zaxxer.hikari.HikariDataSource  ## 数据源连接池连接类型,支持 Durid,Hikari 等常见数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver  ## 数据库连接驱动
        jdbc-url: jdbc:mysql://localhost:3306/member_db?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      sku0:
        type: com.zaxxer.hikari.HikariDataSource  ## 数据源连接池连接类型,支持 Durid,Hikari 等常见数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver  ## 数据库连接驱动
        jdbc-url: jdbc:mysql://localhost:3306/member_sku?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
    rules:  ## 分库分表规则配置
      sharding:
        tables:
          member_order:  ## 数据库表名前缀
            actual-data-nodes: trade0.member_order_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: user_id  ## 按照分表的列
                sharding-algorithm-name: member-order-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          member_sub_order:  ## 数据库表名前缀
            actual-data-nodes: trade0.member_sub_order_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: user_id  ## 按照分表的列
                sharding-algorithm-name: member-sub-order-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          member_perform_item:  ## 数据库表名前缀
            actual-data-nodes: trade0.member_perform_item_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: user_id  ## 按照分表的列
                sharding-algorithm-name: member-perform-item-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          once_task:  ## 数据库表名前缀
            actual-data-nodes: trade0.once_task_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: user_id  ## 按照分表的列
                sharding-algorithm-name: once-task-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          member_ship:  ## 数据库表名前缀
            actual-data-nodes: trade0.member_ship_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: user_id  ## 按照分表的列
                sharding-algorithm-name: member-ship-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          aftersale_order:  ## 数据库表名前缀
            actual-data-nodes: trade0.aftersale_order_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: user_id  ## 按照分表的列
                sharding-algorithm-name: aftersale-order-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)

          member_sku:  ## 数据库表名前缀
            actual-data-nodes: sku0.member_sku_$->{0..0}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: id  ## 按照分表的列
                sharding-algorithm-name: member-sku-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          inventory:  ## 数据库表名前缀
            actual-data-nodes: sku0.inventory_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: target_id  ## 按照分表的列
                sharding-algorithm-name: inventory-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)
          inventory_record:  ## 数据库表名前缀
            actual-data-nodes: sku0.inventory_record_$->{0..1}  ## 实际表名
            table-strategy:  ## 分表策略
              standard:
                sharding-column: target_id  ## 按照分表的列
                sharding-algorithm-name: inventory-record-inline  ## 分表算法名称(使用 yml 配置不能包含下划线,否则不生效)


        sharding-algorithms:
          member-order-inline:
            type: INLINE
            props:
              algorithm-expression: member_order_$->{user_id % 2}  ## 分表算法(取余)
          member-sub-order-inline:
            type: INLINE
            props:
              algorithm-expression: member_sub_order_$->{user_id % 2}  ## 分表算法(取余)
          member-perform-item-inline:
            type: INLINE
            props:
              algorithm-expression: member_perform_item_$->{user_id % 2}  ## 分表算法(取余)
          member-ship-inline:
            type: INLINE
            props:
              algorithm-expression: member_ship_$->{user_id % 2}  ## 分表算法(取余)
          once-task-inline:
            type: INLINE
            props:
              algorithm-expression: once_task_$->{user_id % 2}  ## 分表算法(取余)
          aftersale-order-inline:
            type: INLINE
            props:
              algorithm-expression: aftersale_order_$->{user_id % 2}  ## 分表算法(取余)
          member-sku-inline:
            type: INLINE
            props:
              algorithm-expression: member_sku_$->{id % 1}  ## 分表算法(取余)
          inventory-inline:
            type: INLINE
            props:
              algorithm-expression: inventory_$->{target_id % 1}  ## 分表算法(取余)
          inventory-record-inline:
            type: INLINE
            props:
              algorithm-expression: inventory_record_$->{target_id % 2}  ## 分表算法(取余)


    props:
      sql-show: true  ## 展示执行 SQL
  #### RabbitMQ 配置
  rabbitmq:
    host: localhost
    stream:
      username: guest
      password: guest
  #### Redis配置
  redis:
    # 数据库
    database: 0
    # 主机
    host: localhost
    # 端口
    port: 6379
    # 密码
    #password:
    # 读超时
    timeout: 5s
    # 连接超时
    connect-timeout: 5s
    jedis:
      pool:
        max-active: 8
        max-wait: -1s
        max-idle: 8
        min-idle: 0


eureka:
  client:
    enable: false
    service-url:
      defaultZone: http://localhost:8761/eureka/

# 禁用向 eureka 注册
eureka.client.register-with-eureka: false
eureka.client.fetch-registry: false


logging:
  config: classpath:log/log4j2.xml

## 测试模式
memberclub:
  infrastructure:
    config: apollo
    lock: redis
    feign:
      enabled: false
    id: redisson
    retry: redisson
    mq: rabbitmq
    order: local
    asset: local
    sku: local
    cache: redisson
    usertag: redis
  extension:
    bootcheck: true
apollo:
  meta: http://127.0.0.1:8080
  bootstrap:
    enabled: true # 是否开启 Apollo


### 业务自定义配置项 Start
junit_test_poll_config: false

### 业务自定义配置项 END
